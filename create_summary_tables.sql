-- Create CUSTOMER_PURCHASE_SUMMARY table for SPL-DB-Sync modular approach
-- This represents the "modular" design where summaries are pre-computed

-- For full dataset
DROP TABLE IF EXISTS CUSTOMER_PURCHASE_SUMMARY;
CREATE TABLE CUSTOMER_PURCHASE_SUMMARY AS
SELECT 
    C_CUSTKEY,
    SUM(O_TOTALPRICE) AS TOTAL_SPENT,
    COUNT(O_ORDERKEY) AS ORDER_COUNT,
    AVG(O_TOTALPRICE) AS AVG_ORDER_VALUE,
    MIN(O_ORDERDATE) AS FIRST_ORDER_DATE,
    MAX(O_ORDERDATE) AS LAST_ORDER_DATE
FROM customer C
INNER JOIN orders O ON C.C_CUSTKEY = O.O_CUSTKEY
GROUP BY C_CUSTKEY;

-- Add index for performance
CREATE INDEX idx_customer_purchase_summary_custkey ON CUSTOMER_PURCHASE_SUMMARY(C_CUSTKEY);
CREATE INDEX idx_customer_purchase_summary_total ON CUSTOMER_PURCHASE_SUMMARY(TOTAL_SPENT);

-- For sample dataset
DROP TABLE IF EXISTS CUSTOMER_PURCHASE_SUMMARY_SAMPLE;
CREATE TABLE CUSTOMER_PURCHASE_SUMMARY_SAMPLE AS
SELECT 
    C_CUSTKEY,
    SUM(O_TOTALPRICE) AS TOTAL_SPENT,
    COUNT(O_ORDERKEY) AS ORDER_COUNT,
    AVG(O_TOTALPRICE) AS AVG_ORDER_VALUE,
    MIN(O_ORDERDATE) AS FIRST_ORDER_DATE,
    MAX(O_ORDERDATE) AS LAST_ORDER_DATE
FROM customer_sample C
INNER JOIN orders_sample O ON C.C_CUSTKEY = O.O_CUSTKEY
GROUP BY C_CUSTKEY;

-- Add index for performance
CREATE INDEX idx_customer_purchase_summary_sample_custkey ON CUSTOMER_PURCHASE_SUMMARY_SAMPLE(C_CUSTKEY);
CREATE INDEX idx_customer_purchase_summary_sample_total ON CUSTOMER_PURCHASE_SUMMARY_SAMPLE(TOTAL_SPENT); 